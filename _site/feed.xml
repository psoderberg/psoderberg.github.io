<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peter Soderberg</title>
    <description>Learning to Code at Dev Bootcamp
</description>
    <link>http://psoderberg.github.io/</link>
    <atom:link href="http://psoderberg.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 05 Oct 2014 21:19:20 -0500</pubDate>
    <lastBuildDate>Sun, 05 Oct 2014 21:19:20 -0500</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Week 8 Technical Blog - What is Rails?</title>
        <description>&lt;p&gt;What is Rails?
Since I’ll be spending a lot of time with Rails in the near future I thought it made sense for me to get acquainted with Ruby on Rails.  Affectionately called, Rails, it is a wep application development framework.  A framework allows a programmer to build web applications without essentially reinventing the wheel every time.  Rails, like other frameworks, inlcludes conventions and templates that allow more complex things to be developed in a given time period than might be possible without them.&lt;/p&gt;

&lt;p&gt;One of its strengths is RubyGems, which allows external
or shared packages to be installed to extend the capabilities that Ruby on Rails ships with. This can prove to be an issue at huge scales, since this doesn’t permit the same performance that some other options offer.  Even so, many household names that began as Rails sites have migrated backend work to more efficient frameworks while keeping the ruby front end.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/27/week-8-tb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/27/week-8-tb.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 7 Technical Blog - Databases</title>
        <description>&lt;p&gt;Having spent considerable time in my previous job working with city records in databases of varying levels of sophistication, I am excited to get better at bending databases to my will.  I can think of one MS Access database that had snowballed over a decade to the point where it took minutes to return a query.  On the other hand, there were things run by Oracle that were well indexed and could return queries from an exponentially larger dataset in seconds.
I’m more excited by the possibilities of SQL, but if it’s not necessary then naturally it makes sense to use NOSql options like MongoDB
In terms of optimization, many of the broader principles of other areas of CS apply.  Don’t make the computer think harder than it has to – don’t use “HAVING” unless you’ve already filterd the DB.  Don’t ask for more than you need to – don’t use SELECT * to return everything (and think about it) when you don’t need all columns or enumerate each column to save processing time.
And having learned the lesson of Bobby Tables, I’m eager to learn more about sanitizing my data inputs.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/22/week-7-tb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/22/week-7-tb.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 7 Cultural Blog - Exploring Values</title>
        <description>&lt;p&gt;Exploring Values
Personal Development can be immensely satisying while being incredibly beneficial.  Looking back over everything I’ve learned over the last month and a half in Phase 0 gives me a strong sense of accomplishment.  And I know that the hard technical skills I’ve learned as well as the more nuanced skill will continue to serve me well.&lt;/p&gt;

&lt;p&gt;Values can often be seen as lofty ideals, but they are the cornerstones of what many people believe and how they live their lives.  I tend to see things as more nuanced, where everything belongs on a spectrum of moderation.  I find that zealotry can creep in if ephemeral notions are followed too literally.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/20/week-7-cbmd.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/20/week-7-cbmd.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 6 Cultural Blog - Stereotype Threat</title>
        <description>&lt;p&gt;Stereotype Threat
This was defined by scholars Claude Steele and Joshua Aronson in a widely-cited 1995 paper as “being at risk of confirming, as self-characteristics, a negative stereotype about one’s group.”  This paper went on to show that the presence of this threat could undermine performance of tasks by members of stereotyped groups, even when the tests weren’t measuring abilities.&lt;/p&gt;

&lt;p&gt;A later artice by Steele holds that “virtually all aspects of underperformance—lower standardized-test scores, lower college grades, lower graduation rates—persist among students from the African-American middle class.”&lt;/p&gt;

&lt;p&gt;It follows that something besides class is holding people back.  So what can be done?&lt;/p&gt;

&lt;p&gt;Steele discribes a minimilist “living and learning” community that aimed to overcome this threat.  A group of college students in a dorm were involved in a curriculum focused on academic strategies as well as personal discussions.  Moreover, this program produced results.&lt;/p&gt;

&lt;p&gt;This could show that simply ackowledging something like stereotype threat diminishes its pernicious power.  Engaging with it can be enough to ameliorate its effects.&lt;/p&gt;

&lt;p&gt;The small scale of some programs shows that even if broader societal opinions change slowly, it is increasingly likely that smaller cohesive communities can overcome challenges together.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/19/week-6-cb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/19/week-6-cb.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 6 Technical Blog - Classes vs Modules</title>
        <description>&lt;p&gt;Classes vs Modules
What are these? How do they work?&lt;/p&gt;

&lt;p&gt;Classes
Ruby is object-oriented and has single inheritance.  This means that when a class is created, variables and methods can be generated within that class.  But there are many built-in classes, such as Arrays, instances of which inherit properties from the class.&lt;/p&gt;

&lt;p&gt;One idea is that if you’re not instances within a class, you probably don’t need to make a class.&lt;/p&gt;

&lt;p&gt;Modules
 A module, from ruby-docs, is a collection of methods and constants.  What’s missing here is instances.  Some builtin modules include Math and Enumerables, which are collections of methods. These can be implemented using require in the or include in a class&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/16/week-6-techblog.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/16/week-6-techblog.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 5 Cultural Blog - Pairing and Giving Feedback</title>
        <description>&lt;p&gt;Dev Bootcamp is not just about technical coding knowledge.  The other aspects of being a successful developer are given equal weight.  We’ve been doing pair programming challenges everyweek, and giving each other feedback on what worked and what didn’t.&lt;/p&gt;

&lt;p&gt;Pair programming has been a very positive experience. Even though we’re all learning, it’s useful to explain things to others to drive your own understanding as well as have things shown to you.  And it might be more satisfying after solving a particularly knotty problem to have done so together.&lt;/p&gt;

&lt;p&gt;Another part of this process is giving and receiving feedback about pairing sessions.  It’s great to hear what worked well, but it might be more beneficial to hear what didn’t.  The flip side, since we’re giving as well as receiving feedback, is that it can be harder to give criticism than praise but it can be more valuable to know how to improve.&lt;/p&gt;

&lt;p&gt;This comes down to trust.  The environment has to be right for this to work, and thus far I’ve gotten good experience and feedback out of working with others to solve problems and learn.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/14/week-5-cb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/14/week-5-cb.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 5 Technical Blog - Classes and Instance Variables in Ruby</title>
        <description>&lt;p&gt;We’ve been spending a lot of time working with classes in Ruby.  And with classes it makes sense to dive into instance variable.  The simple code block below illustrates how instance variables and methods work within a class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrafficLight&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:car_motion&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_car&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@my_car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_car&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@car_motion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;approaching the light.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_car&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_motion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;red_light&lt;/span&gt;
       &lt;span class=&quot;vi&quot;&gt;@car_motion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stopping.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_car&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_motion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;green_light&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@car_motion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;going.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_car&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_motion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yellow_light&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@car_motion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;using caution/flooring it!&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Your &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_car&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_motion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This class makes it pretty simple to understand what’s going on in it.  When an instance of the class is created with my car, the instance variables are created.  This lets them be accessed by other methods within the class.
So, when we call the #green_light method, it knows what ‘my_car’ is  because it’s within its scope.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TrafficLight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Ford&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red_light&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this returns:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ford&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;approaching&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ford&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/05/week-5-tb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/05/week-5-tb.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 4 Cultural Blog - Issues Facing the Tech Industry</title>
        <description>&lt;p&gt;Issues Facing the Tech Industry&lt;/p&gt;

&lt;p&gt;Perhap because how quickly things can change in tech, there are many issues facing the industry. Many of these are front page news about topics people didn’t know existed last year.&lt;/p&gt;

&lt;p&gt;Regulations play a role in a few areas. In net neutrality, patent trolling, and crowd-sourced investing decisions could be made that could harm me as both a consumer and whatever I do with my DBC education.&lt;/p&gt;

&lt;p&gt;But uncertainty in a few areas hasn’t slowed down the relentless progress that characterizes the industry. Recently, the Internet of Things has been bandied about ad nauseum. I’m looking forward to playing with adding connectivity to previously dumb items.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/05/week-4-tb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/05/week-4-tb.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 4 Technical Blog - Enumerables</title>
        <description>&lt;p&gt;Some thoughts on &lt;code&gt;Enumerable#map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Enumerable#map&lt;/code&gt; is a synonym for Enumberable#collect. Both of these methods perform an operation on each element in the enumerable. This method runs a block on each element in the array or enumerable on which it was called.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Here are some examples from the Pickaxe(“Programming Ruby”) (1..4).map {&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;i*i } # =&amp;gt; [1, 4, 9, 16] (1..4).map { “cat” } # =&amp;gt; [“cat”, “cat”, “cat”, “cat”] (1..4).map(&amp;amp;:even?) # =&amp;gt; [false, true, false, true]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/dbc/blog/2014/09/05/week-4.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/dbc/blog/2014/09/05/week-4.html</guid>
        
        
        <category>dbc</category>
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Week 3 Cultural Blog - Thoughts on My Thinking Style</title>
        <description>&lt;p&gt;Gregorc Thinking Style&lt;/p&gt;

&lt;p&gt;I agree wholeheartedly with my assessed category of “Concrete-random”. I do love learning through experimentation, even if it means taking some risks. I need to be aware of the potential downsides of this type so I can mitigate the negatives of a distaste for formal routines, detailed record-keeping, and choosing one answer. That said, like most personality assessments, the borders are nebulous so while it is useful to know what type you are most associated with, it would be foolhardy to think that is the only one that applies.&lt;/p&gt;

&lt;p&gt;growth vs. fixed mindset&lt;/p&gt;

&lt;p&gt;The idea of a “fixed” as opposed to a “growth” mindset stems from research by psychologist Carol Dweck. Her intriguing studies have shown that people can view their skills as fixed, and seek to maximize the returns from their innate abilities, or can tend toward growth and improving those abilities. This can manifest itself in seeking valuable challenges, but it’s important to note that it can also be induced to some extent by researchers’ questions. That is, everyone displays traits of each, but especially when going into an undertaking like DBC, it is important to be aware of our tendencies and be in the mindset to get as much out of our work as possible.&lt;/p&gt;

&lt;p&gt;I have caught myself at times trying to fly through the challenges, checking boxes towards a delineated goal as opposed to trying to learn as much as possible. It’s especially tough since there is so much about development I’ve yet to learn, so there’s no way I could explore everything I wonder about and still complete challenges each week, let alone leave my job on a good note and try to sleep a little. My thinking style also plays into this, since my desire to experiment can sometimes take longer than following a recipe to a T, even if it ultimately produces better understanding. So like anything else, I’ll have to use all available knowledge to try to balance as best I can.&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Aug 2014 23:21:04 -0500</pubDate>
        <link>http://psoderberg.github.io/jekyll/update/2014/08/31/week-3-cb.html</link>
        <guid isPermaLink="true">http://psoderberg.github.io/jekyll/update/2014/08/31/week-3-cb.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
